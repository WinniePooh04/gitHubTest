package main

import "fmt"

func main() {
    ch := generator()

    for i := 0; i < 5; i++ {
        value := <-ch
        fmt.Println("Value:", value)
    }
}

func generator() <-chan int {
    ch := make(chan int)

    go func() {
        for i := 0; ; i++ {
            ch <- i
        }
    }()

    return ch
}

------ With Two channels --------------
package main

import (
    "fmt"
    "sync"
)

func main() {
    i1 := generateWork([]int{0, 2, 6, 8})
    i2 := generateWork([]int{1, 3, 5, 7})

    out := fanIn(i1, i2)

    for value := range out {
        fmt.Println("Value:", value)
    }
}

func fanIn(inputs ...<-chan int) <-chan int {
    var wg sync.WaitGroup
    out := make(chan int)

    wg.Add(len(inputs))

    for _, in := range inputs {
        go func(ch <-chan int) {
            for {
                value, ok := <-ch

                if !ok {
                    wg.Done()
                    break
                }

                out <- value
            }
        }(in)
    }

    go func() {
        wg.Wait()
        close(out)
    }()

    return out
}

func generateWork(work []int) <-chan int {
    ch := make(chan int)

    go func() {
        defer close(ch)

        for _, w := range work {
            ch <- w
        }
    }()

    return ch
}
